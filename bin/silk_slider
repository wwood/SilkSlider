#!/usr/bin/env ruby

require 'bio'
require 'bio-logger'
require 'optparse'

require 'bio-signalp'
require 'bio-tm_hmm'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), *%w[.. lib])
require 'sequence_window_descriptor'


# Parse command line options into the options hash
SCRIPT_NAME = File.basename(__FILE__); LOG_NAME = SCRIPT_NAME.gsub('.rb','')
options = {
  :logger => 'stderr',
  :log_level => 'info',
  :window_size => 80,
  :min_glycines => 20,
}
o = OptionParser.new do |opts|
  opts.banner = "
    Usage: #{SCRIPT_NAME} my.fasta

    Predict proteins as being silk-like or not.

    my.fasta is the name of the fasta file you want to analyse. Output is all sequences predicted to be silk-like.
      \n\n"

  opts.separator "\nOptional parameters:\n\n"
  opts.on("--window-size NUM", Integer, "Size of the window to determine glycine percentage over [default: #{options[:window_size] }]") do |arg|
    options[:window_size] = arg
  end
  opts.on("--min-glycines NUM", Integer, "Number of glycines in a window for the protein to be considered silk-like, as an absolute number (not percentage) [default: #{options[:min_glycines] }]") do |arg|
    options[:min_glycines] = arg
  end
  opts.on("--signalp-binary PATH", "Path to signalp binary to use [default: use 'signalp' on $PATH }]") do |arg|
    options[:signalp_binary] = arg
  end
  opts.separator "\nVerbosity:\n\n"
  opts.on("-q", "--quiet", "Run quietly, set logging to ERROR level [default INFO]") {options[:log_level] = 'error'}
  opts.on("--logger filename",String,"Log to file [default #{options[:logger]}]") { |name| options[:logger] = name}
  opts.on("--trace options",String,"Set log level [default INFO]. e.g. '--trace debug' to set logging level to DEBUG"){|s| options[:log_level] = s}

  opts.separator "\n\n"
end
o.parse!
if ARGV.length != 1
  $stderr.puts o
  exit 1
end
Bio::Log::CLI.logger(options[:logger]); Bio::Log::CLI.trace(options[:log_level]); log = Bio::Log::LoggerPlus.new(LOG_NAME); Bio::Log::CLI.configure(LOG_NAME)

signalp_runner = Bio::SignalP::Wrapper.new
tmhmm_runner = Bio::TMHMM::TmHmmWrapper.new

example_result = nil
num_predicted = 0
num_considered = 0

Bio::FlatFile.open(Bio::FastaFormat, ARGF).each do |seq|
  signalp_result = signalp_runner.calculate(seq.seq, :binary_path => options[:signalp_binary])
  if signalp_result.nil?
    $stderr.puts "Unexpected empty sequence detected, ignoring: #{seq.definition}"
    next
  end
  if example_result.nil?
    example_result = signalp_result
    log.info "Using SignalP version: #{example_result.class}" if log.info?
  end
  num_considered += 1

  log.debug "Sequence #{seq.definition} predicted by SignalP? #{signalp_result.prediction}" if log.debug?
  if signalp_result.prediction
    sequence_without_signal_peptide = signalp_result.cleave(seq.seq)

    tmhmm_protein = tmhmm_runner.calculate sequence_without_signal_peptide
    log.debug "Sequence #{seq.definition} predicted by TMHMM2? #{tmhmm_protein.has_domain?}" if log.debug?

    if !tmhmm_protein.has_domain?
      # Does it pass the sliding window test?
      slider = Bio::SequenceWindowDescriptor.new
      slider.calculate sequence_without_signal_peptide, options[:window_size]
      log.debug "Found maximal glycine count of #{slider.maximum_counts[:gly] } in window size #{options[:window_size] }" if log.debug?
      if slider.maximum_counts[:gly] >= options[:min_glycines]
        # We have a winner. Output.
        puts ">#{seq.definition}"
        puts seq.seq
        num_predicted += 1
      end
    end
  end
end

log.info "Predicted #{num_predicted} out of #{num_considered} as silk-like" if log.info?
